# -*- coding: utf-8 -*-
import threading
from functools import partial

# Form implementation generated from reading ui file 'window.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys

from PyQt5.QtCore import QThread


class Ui_MainWindow(QtCore.QObject):

    # 初始化
    def __init__(self):
        super().__init__()
        # 新建一个窗口并绘制图片结果
        self.trainingAction = None
        self.selectImgAction = None
        self.startAction = None
        self.initAction = None
        self.app = QtWidgets.QApplication([])
        self.window = QtWidgets.QMainWindow()
        self.statusbar = None
        self.init = None
        self.menubar = None
        self.graphicsView = None
        self.horizontalLayout_2 = None
        self.centralwidget = None
        self.scene = None

    def threadRun(self, method):
        # 新建线程
        t = updateUIThread(mainui=self, method=method)
        # 启动线程
        t.start()

    # 设置点击事件
    def setInitYOLO(self, initYOLO):
        self.initAction.triggered.connect(partial(self.threadRun, initYOLO))

    def setStartYOLO(self, onStartYOLO):
        self.startAction.triggered.connect(partial(self.threadRun, onStartYOLO))

    def setupUi(self):
        self.window.setObjectName("MainWindow")
        self.window.resize(1306, 865)
        self.centralwidget = QtWidgets.QWidget(self.window)
        self.centralwidget.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setAutoFillBackground(False)
        self.centralwidget.setObjectName("central-widget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout_2.setContentsMargins(0, 5, 0, 0)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setObjectName("graphicsView")
        self.horizontalLayout_2.addWidget(self.graphicsView)
        self.window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(self.window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1306, 26))
        self.menubar.setObjectName("menubar")
        self.init = QtWidgets.QMenu(self.menubar)
        self.init.setObjectName("init")
        # 添加操作主键
        self.initAction = QtWidgets.QAction()
        self.initAction.setObjectName("初始化")
        self.initAction.setText("初始化")
        self.startAction = QtWidgets.QAction()
        self.startAction.setObjectName("启动")
        self.startAction.setText("启动")

        self.selectImgAction = QtWidgets.QAction()
        self.selectImgAction.setObjectName("选择图片")
        self.selectImgAction.setText("选择图片")

        self.trainingAction = QtWidgets.QAction()
        self.trainingAction.setObjectName("训练")
        self.trainingAction.setText("训练")

        self.init.addActions([self.initAction, self.startAction, self.selectImgAction, self.trainingAction])
        self.window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self.window)
        self.statusbar.setObjectName("statusbar")
        self.window.setStatusBar(self.statusbar)
        self.menubar.addAction(self.init.menuAction())

        # 画板
        self.scene = QtWidgets.QGraphicsScene()
        self.graphicsView.setScene(self.scene)
        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self.window)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.window.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.init.setTitle(_translate("MainWindow", "菜单"))

    # 绘制图片
    def drawImgPath(self, path, ui):
        ui.threadObject = self.updateDrawImgPath
        ui.threadArgs = {path, }

    def updateDrawImgPath(self, path):
        # 读取图片
        img = QtGui.QPixmap(path)
        self.scene.setSceneRect(0, 0, img.width(), img.height())
        self.scene.addPixmap(img)

    def drawImg(self, img, ui):
        ui.threadObject = self.updateDrawImg
        ui.threadArgs = {img, }

    def updateDrawImg(self, img):
        # 读取图片
        self.scene.setSceneRect(0, 0, img.width(), img.height())
        self.scene.addPixmap(img)
        # 保存图片
        img.save('E:\\ai\\yolov8\\tmp\\test.jpg')

    # 绘制标识框
    def drawBox(self, rect):
        # 画一个矩形
        self.scene.addRect(rect)

    def show(self):
        self.window.show()
        # 进入程序主循环，并通过exit函数确保主函数安全结束
        sys.exit(self.app.exec_())

    def setSelectImg(self, onSelectImg):
        self.selectImgAction.triggered.connect(partial(onSelectImg, self))

    def setTraining(self, onTraining):
        self.trainingAction.triggered.connect(partial(self.threadRun, onTraining))

class updateUIThread(QThread):
    method = None
    signal = QtCore.pyqtSignal()
    mainui = None

    threadObject = None
    threadArgs = None

    def updateScene(self):
        if self.threadObject is None:
            return
        if self.threadArgs is None or len(self.threadArgs) == 0:
            self.method(self)
        elif len(self.threadArgs) == 1:
            self.threadObject(self.threadArgs.pop())
        else:
            self.threadObject(self.threadArgs)

    def __init__(self, parent=None, mainui=None, method=None):
        super(updateUIThread, self).__init__(parent)
        self.method = method
        self.mainui = mainui
        self.signal.connect(self.updateScene)

    def run(self):
        self.method(self)
        self.signal.emit()
